use rand::{Rng, SeedableRng};
use rand_chacha::ChaChaRng;
use strum::IntoEnumIterator;
use strum_macros::Display;

use crate::{
    board_repr::{board::BitBoard, square::Square},
    move_generation::tables::{
        generate_bishop_attacks, generate_rook_attacks, get_bishop_relevant_occupancy_mask,
    },
};

use super::tables::{generate_blockers, get_rook_relevant_occupancy_mask};

#[derive(Debug, Display)]
pub enum MagicPiece {
    ROOK,
    BISHOP,
}

pub const ROOK_TABLE_SIZE: usize = 102_400;
pub const BISHOP_TABLE_SIZE: usize = 5_248;

pub fn find_magics(piece: MagicPiece) {
    let mut rng = ChaChaRng::from_entropy();
    let mut offset = 0;
    let mut table: Vec<BitBoard> = vec![
        BitBoard::default();
        match piece {
            MagicPiece::ROOK => ROOK_TABLE_SIZE,
            MagicPiece::BISHOP => BISHOP_TABLE_SIZE,
        }
    ];
    for square in Square::iter() {
        let mask = match piece {
            MagicPiece::ROOK => get_rook_relevant_occupancy_mask(square),
            MagicPiece::BISHOP => get_bishop_relevant_occupancy_mask(square),
        };
        let bits = mask.count_ones();
        let permutations = 2u64.pow(bits);
        let end = offset + permutations - 1;
        let shift = 64 - bits;

        let blockers = generate_blockers(mask);
        let attacks = match piece {
            MagicPiece::ROOK => generate_rook_attacks(square, &blockers),
            MagicPiece::BISHOP => generate_bishop_attacks(square, &blockers),
        };

        let mut found = false;
        let mut random: u64 = 0;
        while !found {
            found = true;
            random = rng.gen::<u64>() & rng.gen::<u64>() & rng.gen::<u64>();
            for i in 0..permutations {
                let blocker_board = blockers[i as usize];
                let block = blocker_board & mask;
                let index = ((block.value().wrapping_mul(random) >> shift) + offset) as usize;

                if table[index] == BitBoard::default() {
                    table[index] = attacks[i as usize]
                } else {
                    found = false;
                    // cleanup table
                    for w in offset..=end {
                        table[w as usize] = BitBoard::default();
                    }
                    break;
                }
            }
        }

        print!("{}u64, ", random);
        if (square.index() + 1) % 8 == 0 {
            println!();
        }
        offset += permutations;
    }
}

// These are generated by "find_magics()".
// To speed up move generation rook attacks are going to be precalculated and can be looked up by the index.
// You can get the index by bit-anding blocker table with the occupancy mask and muptiplying result by magic number.
pub const ROOK_MAGICS: [u64; 64] = [
    36038832211214336u64,
    378302644113903618u64,
    1188967895969824776u64,
    13907133245807396868u64,
    9367496090353451520u64,
    2630106580464467969u64,
    2377902802425872524u64,
    36034037759869184u64,
    144959751535493120u64,
    154670637149863936u64,
    9277556107318939656u64,
    9241667979104681992u64,
    578008881863706624u64,
    1297458913739014272u64,
    1153062263570169984u64,
    144255927711876352u64,
    110501195431936u64,
    9223804145511710724u64,
    10376576117059354676u64,
    143486401695744u64,
    282574757298213u64,
    361696444721397762u64,
    2919269343684987152u64,
    288232575213797652u64,
    144156430499332112u64,
    4503892758962176u64,
    9007751160664064u64,
    2452246285282447362u64,
    294985814248587268u64,
    76750311812890752u64,
    1207255057105421825u64,
    36873226244227650u64,
    4629700830335860865u64,
    1154082592211865600u64,
    1945626580445306880u64,
    29418876718548992u64,
    22522398339237888u64,
    297802726539002880u64,
    3659194074923520u64,
    589619586401281u64,
    70370927345664u64,
    4506082655354882u64,
    594546621753262096u64,
    844564785070088u64,
    8796160163968u64,
    1407392068206610u64,
    580551400751129u64,
    9259682311018971138u64,
    900721299899285568u64,
    2305880981300576512u64,
    41728804952080896u64,
    5767564144166305920u64,
    4508002103099520u64,
    3533636926487923200u64,
    5207433098100864u64,
    145172094538240u64,
    72761358793375786u64,
    1749789402101646435u64,
    1196582195208197u64,
    2533893266219589u64,
    324822416809791498u64,
    2450239689446677123u64,
    4620695427711305732u64,
    1226386474605346949u64,
];

// These are generated by "find_magics()".
// To speed up move generation bishop attacks are going to be precalculated and can be looked up by the index.
// You can get the index by bit-anding blocker table with the occupancy mask and muptiplying result by magic number.
pub const BISHOP_MAGICS: [u64; 64] = [
    1161932006826737799u64,
    614864511958008832u64,
    11538512520692105312u64,
    1130377414459392u64,
    289360812224675840u64,
    76847078499680320u64,
    1132638996267040u64,
    1225542327838777600u64,
    1157715411006652992u64,
    1189040530365940688u64,
    17609911705604u64,
    5765456422280233505u64,
    577476718764491432u64,
    218425733016453136u64,
    299489927929794560u64,
    873709327591014913u64,
    9241424935518471273u64,
    2251808672841872u64,
    4521200411869256u64,
    73185727348805637u64,
    2852150352805896u64,
    288512959498551552u64,
    299566358685025312u64,
    4611723410431608840u64,
    9232383707442086437u64,
    10839003075184640u64,
    19150194290264097u64,
    3486916416383354952u64,
    1189231845875662848u64,
    4508272828796928u64,
    282592273270856u64,
    4956783286899779584u64,
    4612829794038973952u64,
    10412467611725203472u64,
    18093571937682432u64,
    144121787293631104u64,
    1315055768413671680u64,
    4620693975752310976u64,
    285890204337410u64,
    11531467124048463120u64,
    20345398737511432u64,
    9293099666768392u64,
    39591046318080u64,
    37666997403776u64,
    1152956697770238082u64,
    299080081473600u64,
    729584565639184656u64,
    9229002653365960741u64,
    217758346869260804u64,
    13835199353400066320u64,
    3783095335691223172u64,
    72058714496438272u64,
    2534717933355080u64,
    35777381796352u64,
    1481759078689554432u64,
    6093406614218375428u64,
    2306409001212450818u64,
    648518500977217569u64,
    2257409074594819u64,
    2414492363319936004u64,
    288411314670338304u64,
    869200294897058048u64,
    146437572120543360u64,
    2308095977325659168u64,
];
