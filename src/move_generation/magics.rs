use rand::{Rng, SeedableRng};
use rand_chacha::ChaChaRng;
use strum::IntoEnumIterator;
use strum_macros::Display;

use crate::{
    board_repr::{board::BitBoard, square::Square},
    move_generation::tables::{
        generate_bishop_attacks, generate_rook_attacks, get_bishop_relevant_occupancy_mask,
    },
};

use super::tables::{generate_blockers, get_rook_relevant_occupancy_mask};

#[derive(Debug, Display)]
pub enum MagicPiece {
    ROOK,
    BISHOP,
}

pub const ROOK_TABLE_SIZE: usize = 102_400;
pub const BISHOP_TABLE_SIZE: usize = 5_248;

pub fn find_magics(piece: MagicPiece) {
    let mut rng = ChaChaRng::from_entropy();
    let mut offset = 0;
    for square in Square::iter() {
        let mask = match piece {
            MagicPiece::ROOK => get_rook_relevant_occupancy_mask(square),
            MagicPiece::BISHOP => get_bishop_relevant_occupancy_mask(square),
        };
        let bits = mask.count_ones();
        let permutations = 2u64.pow(bits);
        let end = offset + permutations - 1;
        let shift = 64 - bits;

        let mut table: Vec<BitBoard> = vec![
            BitBoard::default();
            match piece {
                MagicPiece::ROOK => ROOK_TABLE_SIZE,
                MagicPiece::BISHOP => BISHOP_TABLE_SIZE,
            }
        ];
        let blockers = generate_blockers(mask);
        let attacks = match piece {
            MagicPiece::ROOK => generate_rook_attacks(square, &blockers),
            MagicPiece::BISHOP => generate_bishop_attacks(square, &blockers),
        };

        let mut found = false;
        let mut random: u64 = 0;
        while !found {
            found = true;
            random = rng.gen::<u64>() & rng.gen::<u64>() & rng.gen::<u64>();
            for i in 0..permutations {
                let blocker_board = blockers[i as usize];
                let block = blocker_board & mask;
                let index = ((block.value().wrapping_mul(random) >> shift) + offset) as usize;

                if table[index] == BitBoard::default() {
                    table[index] = attacks[i as usize]
                } else {
                    found = false;
                    // cleanup table
                    for w in offset..=end {
                        table[w as usize] = BitBoard::default();
                    }
                    break;
                }
            }
        }

        println!(
            "FOUND MAGIC: Piece: {}, Square: {}, Number: {}",
            piece, square, random
        );
        offset += permutations;
    }
}

// These are generated by "find_magics()".
// To speed up move generation rook attacks are going to be precalculated and can be looked up by the index.
// You can get the index by bit-anding blocker table with the occupancy mask and muptiplying result by magic number.
pub const ROOK_MAGICS: [u64; 64] = [
    36051062131556352u64,
    18015790347362304u64,
    2341889398555017344u64,
    36033847908896768u64,
    144119621857841184u64,
    2666133195606991104u64,
    1441152499301029906u64,
    144118767937519876u64,
    2306124622711488768u64,
    9513150800325509248u64,
    162411473916723217u64,
    140806216484865u64,
    2360167697168728832u64,
    1171358665370764288u64,
    378865353030762500u64,
    4395935521793196160u64,
    1157742313381838849u64,
    9010222915923968u64,
    27058981461786688u64,
    1153062792253706240u64,
    1408474668335620u64,
    2882445048828428800u64,
    30786461958672u64,
    2341900393602121923u64,
    73298395057373188u64,
    310757480692981760u64,
    9242799586979913729u64,
    2326109252637163648u64,
    4616620628760592513u64,
    2535475969524736u64,
    77125844426293776u64,
    81073907213372417u64,
    81135164226273824u64,
    4044267718541574216u64,
    141630984167424u64,
    9225641443895281664u64,
    2738478846666869760u64,
    140754676615681u64,
    9376802297171935504u64,
    72902741696973825u64,
    722898179806232576u64,
    9223460002616852480u64,
    16141044277529935888u64,
    1154900625805312128u64,
    1465926076889858176u64,
    18577365651194112u64,
    306246978114420752u64,
    567349082718261u64,
    612781470201283072u64,
    37228372803199488u64,
    3503801893342675008u64,
    2305984880582852736u64,
    9259976980114702464u64,
    562984653947392u64,
    1153204147949020160u64,
    6962710172376580608u64,
    1153205490529894401u64,
    9223654337027375122u64,
    10168284624195625u64,
    5498113363969u64,
    563517429123106u64,
    562967406444930u64,
    301459717279580193u64,
    153511074908603334u64,
];

// These are generated by "find_magics()".
// To speed up move generation bishop attacks are going to be precalculated and can be looked up by the index.
// You can get the index by bit-anding blocker table with the occupancy mask and muptiplying result by magic number.
pub const BISHOP_MAGICS: [u64; 64] = [
    2386908941780025856u64,
    4787282418608128u64,
    1013310475045175296u64,
    583510842335559808u64,
    1139231904792577u64,
    287385658195969u64,
    5206725854431805441u64,
    865676842913236489u64,
    2451682669877133440u64,
    2307096486904861312u64,
    603922708790575112u64,
    18023237554276480u64,
    9226892681945350308u64,
    8968034844928u64,
    38284999309919296u64,
    9261724119207252480u64,
    1171006358033666560u64,
    4539352281809152u64,
    3030922639469314624u64,
    14133421565191151808u64,
    2892445658929692672u64,
    281483572019712u64,
    9368050177166346252u64,
    9799878152619819520u64,
    11329368215390244u64,
    19175689148236800u64,
    564049599316992u64,
    76851464751890688u64,
    1271035584323584u64,
    1848279079911601u64,
    1153205257007042560u64,
    5235718245131518592u64,
    11530499550529192576u64,
    18157510043109376u64,
    7206392998711003648u64,
    72569982550144u64,
    306669188297524352u64,
    76562301834561664u64,
    9299937632880443712u64,
    281786445857288u64,
    41113497265807366u64,
    1154051819812422144u64,
    5873829881468487680u64,
    4701759802580142080u64,
    212253559366658u64,
    9295746326765634177u64,
    1731686850470412518u64,
    1153205215147589888u64,
    2305984365446828292u64,
    6832384651568144u64,
    4665731417853399168u64,
    1161946571471323270u64,
    13835058106905923592u64,
    7061661825754488841u64,
    9227893310406819840u64,
    5069178167918592u64,
    844570977896448u64,
    580684007772160u64,
    9804336410269356032u64,
    74309394023974922u64,
    4611688287244928260u64,
    219833193828795904u64,
    288239206873077248u64,
    9131452692959265u64,
];
